{"version":3,"sources":["../src/server.js"],"names":["app","use","mongoose","connect","process","env","DB_URL","useNewUrlParser","useUnifiedTopology","useFindAndModify","useCreateIndex","db","connection","on","console","error","bind","once","log","global","appRoot","path","resolve","__dirname","express","urlencoded","extended","json","secret","cookie","maxAge","resave","saveUninitialized","expressLayouts","set","join","routes","get","req","res","send","errorHandler","listen","APP_PORT"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AAeA;;;;AAlBA,IAAMA,GAAG,GAAG,0BAAZ,C,CAEA;;AAGAA,GAAG,CAACC,GAAJ,CAAQ,iCAAR,E,CAEA;;AACAC,qBAASC,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,MAA7B,EAAqC;AACnCC,EAAAA,eAAe,EAAE,IADkB;AAEnCC,EAAAA,kBAAkB,EAAE,IAFe;AAGnCC,EAAAA,gBAAgB,EAAE,KAHiB;AAInCC,EAAAA,cAAc,EAAE;AAJmB,CAArC;;AAMA,IAAMC,EAAE,GAAGT,qBAASU,UAApB;AACAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,kBAA5B,CAAf;AACAH,EAAE,CAACM,IAAH,CAAQ,MAAR,EAAgB;AAAA,SAAMH,OAAO,CAACI,GAAR,CAAY,gBAAZ,CAAN;AAAA,CAAhB;AAGA;AAEAC,MAAM,CAACC,OAAP,GAAiBC,iBAAKC,OAAL,CAAaC,SAAb,CAAjB;AACAvB,GAAG,CAACC,GAAJ,CAAQuB,oBAAQC,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACA1B,GAAG,CAACC,GAAJ,CAAQuB,oBAAQG,IAAR,EAAR;AACA3B,GAAG,CAACC,GAAJ,CAAQ,+BAAR;AACAD,GAAG,CAACC,GAAJ,CACE,gCAAQ;AACN2B,EAAAA,MAAM,EAAE,QADF;AAENC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAFF;AAGNC,EAAAA,MAAM,EAAE,KAHF;AAINC,EAAAA,iBAAiB,EAAE;AAJb,CAAR,CADF;AAQAhC,GAAG,CAACC,GAAJ,CAAQ,+BAAR,E,CACA;AAEA;;AACAD,GAAG,CAACC,GAAJ,CAAQ,wBAAO,KAAP,CAAR,E,CAEA;;AACAD,GAAG,CAACC,GAAJ,CAAQgC,6BAAR;AACAjC,GAAG,CAACkC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CACA;;AACAlC,GAAG,CAACkC,GAAJ,CAAQ,OAAR,EAAiBb,iBAAKc,IAAL,CAAUZ,SAAV,EAAqB,OAArB,CAAjB;AAEAvB,GAAG,CAACC,GAAJ,CAAQ,MAAR,EAAgBmC,kBAAhB;AACApC,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBuB,8BAAe,SAAf,CAApB;AACAxB,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBuB,8BAAe,SAAf,CAApB;AACAxB,GAAG,CAACqC,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,aAAT;AACD,CAFD;AAGAxC,GAAG,CAACC,GAAJ,CAAQuB,8BAAeH,iBAAKc,IAAL,CAAUZ,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAvB,GAAG,CAACC,GAAJ,CAAQwC,yBAAR,E,CAEA;;AAEAzC,GAAG,CAAC0C,MAAJ,CAAWtC,OAAO,CAACC,GAAR,CAAYsC,QAAZ,IAAwB,IAAnC,EAAyC,SAAzC,EAAoD;AAAA,SAClD7B,OAAO,CAACI,GAAR,kCAAsCyB,gBAAtC,EADkD;AAAA,CAApD","sourcesContent":["import express from \"express\";\r\nimport expressLayouts from \"express-ejs-layouts\";\r\nimport logger from \"morgan\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport mongoose from \"mongoose\";\r\nimport { APP_PORT, DB_URL } from \"../config\";\r\nimport { errorHandler } from \"../middlewares\";\r\nimport path from \"path\";\r\nimport session from \"express-session\";\r\nimport flash from \"express-flash\";\r\n\r\nconst app = express();\r\n\r\n// const methodOverride = require(\"method-override\");\r\nimport methodOverride from \"method-override\";\r\n\r\napp.use(methodOverride());\r\n\r\n// Database connection\r\nmongoose.connect(process.env.DB_URL, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  useFindAndModify: false,\r\n  useCreateIndex: true,\r\n});\r\nconst db = mongoose.connection;\r\ndb.on(\"error\", console.error.bind(console, \"Connection Error\"));\r\ndb.once(\"open\", () => console.log(\"DB Connected..\"));\r\n\r\nimport routes from \"../routes\";\r\n// import userRoutes from './routes/user';\r\n\r\nglobal.appRoot = path.resolve(__dirname);\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(\r\n  session({\r\n    secret: \"secret\",\r\n    cookie: { maxAge: 15000 },\r\n    resave: false,\r\n    saveUninitialized: false,\r\n  })\r\n);\r\napp.use(flash());\r\n// app.use(methodOverride('_method'));\r\n\r\n// Setting logger\r\napp.use(logger(\"dev\"));\r\n\r\n// Setting templating engine\r\napp.use(expressLayouts);\r\napp.set(\"view engine\", \"ejs\");\r\n// app.set('views', path.join(__dirname + '/views'));\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\napp.use(\"/api\", routes);\r\napp.use(\"/uploads\", express.static(\"uploads\"));\r\napp.use(\"/tickets\", express.static(\"tickets\"));\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"hello Pawan\");\r\n});\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(errorHandler);\r\n\r\n// app.listen(APP_PORT, () => console.log(`Server started on PORT ${APP_PORT}`));\r\n\r\napp.listen(process.env.APP_PORT || 8080, \"0.0.0.0\", () =>\r\n  console.log(`Server started on port ${APP_PORT}`)\r\n);\r\n"],"file":"server.js"}