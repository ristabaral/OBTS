<%- include('./partials/nav') %>
    <link rel="stylesheet" href="/css/home.css">

    <div class='sagar'>
        <div class="neggro">

        </div>
        <div class="bus">
            <p>Leaving from</p>
            <form autocomplete="off" action="/api/chooseroute" method="POST">
                <div class="autocomplete" style="width:300px;">
                    <input id="myInput" list="datalist" onkeyup="ac(this.value)" class="nibba" placeholder="Enter Source City (Eg:Pokhara" type="text" name="pickup">
                </div>
                <p>Going Destination</p>
                <input type="text" list="datalist" onkeyup="ac(this.value)" class="nibba" placeholder="Enter Destination City (Eg:Pokhara" name="dropoff">
                <datalist id="datalist">
                <% checkpoints.forEach(ch=>{ %>
     <option value="<%= ch.checkpoint %>"></option>
                <% }) %>          
        <!-- This data list will be edited through javascript     -->
        </datalist>
                <p>Travel Date </p>
                <input type="date" name="depart">
                <!-- <p>Select Shift</p>
            <input type="checkbox">Both
            <input type="checkbox">Day
            <input type="checkbox">Night -->
                <br>
                <button id="queen" onclick="hello()" type="submit" width="200px" class="btn btn-primary">Search buses</button>
            </form>
        </div>
    </div>
    <hr>
    </br>
    <div class="aw main-body">
        <div class="ah heading-1 main-header-family rest1">
            <div class="promise-head-main"> Why Book With Us?</div>
        </div>
        <div class="ad rest1">

        </div>
        <div class="clearfix aa our-promise-blocks" id="advantage">
            <div class="fl rest1 appear-first">
                <div class="imgCont rest1 animate">
                    <img src=https://s1.rdbuz.com/Images/webplatform/rbdotcom/multiple_bus_service.svg height="90" />
                </div>
                <div class="tilleBlock rest1 animate">
                    Multiple Bus Services
                </div>
                <div class="second-level-heading descCont rest1 animate">
                    Choose from various bus services, coach companies and your preferred seat.
                </div>
            </div>
            <div class="fl rest1 appear-second">
                <div class="imgCont rest1 animate">
                    <img src=https://s1.rdbuz.com/Images/webplatform/rbdotcom/secured%20payments.svg height="100" />
                </div>
                <div class="tilleBlock rest1 animate">
                    Secured Payments
                </div>
                <div class="second-level-heading descCont rest1 animate">
                    redBus has the highest security standards and keeps your information and purchases completely safe and secure.
                </div>
            </div>
            <div class="fl rest1 appear-third">
                <div class="imgCont rest1 animate">
                    <img src=https://s1.rdbuz.com/Images/webplatform/rbdotcom/global_coverage.svg height="90" />
                </div>
                <div class="tilleBlock rest1 animate">
                    Global Coverage
                </div>
                <div class="second-level-heading descCont rest1 animate">
                    We constantly add bus supply for different countries. Get all your bus travel needs covered under one roof
                </div>
            </div>
            <div class="fl rest1 appear-fourth">
                <div class="imgCont rest1 animate">
                    <img src=https://s1.rdbuz.com/Images/webplatform/rbdotcom/customer_support.svg height="90" />
                </div>
                <div class="tilleBlock rest1 animate">
                    Superior Customer Support
                </div>
                <div class="second-level-heading descCont rest1 animate">
                    Our customer support will ensure to service all your queries.
                </div>
            </div>
        </div>
    </div>
    </section>
    </div>
    <div class="popup" id="popup-1">
        <div class="content">
            <div class="close-btn" onclick="togglePopup()"><em>&times;</em>
            </div>

            <h1>Sign in</h1>
            <hr>
            <form action="/api/login" method="post">
                <div class="input-field"><input placeholder="Email" name="email" class="validate"></div>
                <div class="input-field"><input type="password" name="password" placeholder="Password" class="validate"></div>
                <button class="second-button" type="submit"><span style="padding-bottom: 15px;">Sign in</span></button>
                <p>Don't have an account?<a class="nav-link active" id="hell" onclick="togglePopupRegister()" aria-current="page">Signup</a></p>
            </form>
        </div>
    </div>
    <div class="popup" id="popup-2">
        <div class="content">
            <div class="close-btn" onclick="togglePopupRegister()"><em>&times;</em>
            </div>

            <h1>Sign up</h1>
            <hr>
            <form action="/api/register" method="post">
                <div class="input-field"><input placeholder="Name" name="name" class="validate"></div>
                <div class="input-field"><input placeholder="Email" name="email" class="validate"></div>
                <div class="input-field"><input type="password" placeholder="Password" name="password" class="validate"></div>
                <button class="second-button" type="submit">Sign in</button>
                <p>Or, <a class="nav-link active" id="hell" onclick="togglePopup()" aria-current="page">Login</a></p>
            </form>
        </div>
    </div>

    <!-- <script src="https://cdn.socket.io/3.1.3/socket.io.min.js"></script>

    <script>

        const socket = io('http://localhost:3000')

        socket.on('connection',()=>{
            console.log('user connected...')

        }) 
        
        
    </script> -->

    <script>
        var checkpoints = <%- JSON.stringify(checkpoints) %>;


        function togglePopup() {
            document.getElementById("popup-1")
                .classList.toggle("active");
        }

        function togglePopupRegister() {
            document.getElementById("popup-2")
                .classList.toggle("active");
        }

        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function(e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) {
                    return false;
                }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function(e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function(e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }

            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function(e) {
                closeAllLists(e.target);
            });
        }

        autocomplete(document.getElementById("myInput"), checkpoints);
         
        var n = checkpoints.length; //length of datalist tags    

        function ac(value) {


            document.getElementById('datalist').innerHTML = '';
            //setting datalist empty at the start of function
            //if we skip this step, same name will be repeated

            l = value.length;
            //input query length
            for (var i = 0; i < n; i++) {
                // if (((tags[i].toLowerCase()).indexOf(value.toLowerCase())) > -1) {
                if (((checkpoints[i].toLowerCase()).indexOf(value.toLowerCase())) > -1) {

                    //comparing if input string is existing in tags[i] string

                    var node = document.createElement("option");
                    // var val = document.createTextNode(tags[i]);
                    var val = document.createTextNode(checkpoints[i]);
                    node.appendChild(val);

                    document.getElementById("datalist").appendChild(node);
                    //creating and appending new elements in data list
                }

            }
        }
        // var tags = [
        //     "Delhi",
        //     "Ahemdabad",
        //     "Punjab",
        //     "Uttar Pradesh",
        //     "Himachal Pradesh",
        //     "Karnatka",
        //     "Kerela",
        //     "Maharashtra",
        //     "Gujrat",
        //     "Rajasthan",
        //     "Bihar",
        //     "Tamil Nadu",
        //     "Haryana"
        // ];

        /*list of available options*/
        var n = checkpoints.length; //length of datalist tags    

        function ac(value) {
            document.getElementById('datalist').innerHTML = '';
            //setting datalist empty at the start of function
            //if we skip this step, same name will be repeated

            l = value.length;
            //input query length
            for (var i = 0; i < n; i++) {
                if (((checkpoints[i].toLowerCase()).indexOf(value.toLowerCase())) > -1) {
                    //comparing if input string is existing in tags[i] string

                    var node = document.createElement("option");
                    var val = document.createTextNode(checkpoints[i]);
                    node.appendChild(val);

                    document.getElementById("datalist").appendChild(node);
                    //creating and appending new elements in data list
                }
            }
        }
    </script>